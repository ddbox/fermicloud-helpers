#!/bin/bash
# from https://gist.github.com/thomasdarimont/46358bc8167fce059d83a1ebdb92b0e7
# modified to optionally read from stdin and to print both parts of the token

help() {
    echo "usage $0 <a_jwt_token>"
    echo "usage $0 -human <a_jwt_token>"
    echo "usage $0 -help"
    echo "translates <a_jwt_token> from base64 into readable format"
    echo "-human translates dates from epoch to human readable"
    echo " NB <a_jwt_token> can be either stdin, or a file containing base64"
    exit 0
}

decode_base64_url() {
  local len=$((${#1} % 4))
  local result="$1"
  if [ $len -eq 2 ]; then result="$1"'=='
  elif [ $len -eq 3 ]; then result="$1"'='
  fi
  echo "$result" | tr '_-' '/+' | base64 --decode
}

decode_jwt() {
    TOKEN=$1
    decode_base64_url "`echo "$TOKEN"|cut -d. -f1`" | jq .
    decode_base64_url "`echo "$TOKEN"|cut -d. -f2`" | jq .
}

human_dates() {
    for w in "$@"; do
        echo $w | grep -iE '{|}|"'
        if [ "$?" -ne 0 ]; then
            #echo test $w1 >&2
            w1=$(echo $w | sed -e s'/,//')
            if echo $w1 | grep -q "[0-9]"; then
               #echo pass $w1 >&2
               #d=$(jq -n $(echo $w1 | strftime("%B %d %Y %I:%M%p %Z")))
               d=$(echo $w1 | jq 'todate')
               echo $d
               if echo $w | grep -q ',' ; then
                   echo ','
               fi
            else
                echo $w
            fi
        fi
    done
}


DATE_FMT='epoch'

if [[ $# -ge 1 ]] ;then
    if [ $1 = '-help' ] || [ $1 = '-h' ]; then
       help 
       exit 0
    fi
    if [ $1 = '-human' ]; then
        DATE_FMT=$1
        shift
    fi
fi

if [ $# = 0 ];then
    read TOKEN
elif [ -f "$1" ]; then
    TOKEN=$(cat $1)
else
    TOKEN="$1"
fi

JWT="$(decode_jwt $TOKEN)"
if [ "$DATE_FMT" = "epoch" ] ; then
   echo $JWT | jq .
else
   READABLE="$(human_dates $JWT)"
   echo $READABLE | jq .
fi
